List BFS

List<Integer>[] list = new ArrayList[nV+1];
public static void BFS(int start) {
    Queue<Integer> q = new LinkedList<>();
    q.add( start );
    visit[start] = true;
    
    while( !q.isEmpty() ) {			
        int tmp = q.poll();	
        for(int i=0; i<list[tmp].size(); i++) {
            if( !visit[list[tmp].get(i)] ) {
                q.add( list[tmp].get(i) );
                visit[list[tmp].get(i)] = true;
            }
        }
    }
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

2D Array BFS

class Point{
	int x;
	int y;
	
	Point(int x, int y){
		this.x = x;
		this.y = y;
	}
}

static int[][] grid;
static boolean[][] visit;
static int[] dx = { 0, 1, 0, -1 };
static int[] dy = { 1, 0, -1, 0 };

private static void BFS(Point point) {

    Queue<Point> q = new LinkedList<Point>();
				
    q.add( point );
    visit[i][j] = true;

    while( !q.isEmpty() ) {						
        Point p = q.poll();
        char tmp = grid[p.y][p.x];

        for(int dic=0; dic<4; dic++) {				
            int nowX = p.x + dx[dic];
            int nowY = p.y + dy[dic];

            if( nowX < 0 || nowY < 0 || nowX >= n || nowY >= n )
                continue;

            if( tmp != grid[nowY][nowX] )
                continue;

            if( !visit[nowY][nowX] ) {
                visit[nowY][nowX] = true;
                q.add( new Point( nowX, nowY ) );
            }
        }
    }		
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ